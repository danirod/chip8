SCHIP SPECIFICATION
Author: Dani Rodr√≠guez <danirod@outlook.com>
Creative Commons 3.0 Attribution - Non Commercial - Share Alike


1. INTRODUCTION
===============
SCHIP (also known as SUPER-CHIP) is an extened specification designed over the
original CHIP-8 specification made in the 70s. Initially designed for HP48
calculators, it has the following features:

* A new extended screen display mode with bigger resolution (128x64).
* Instructions for scrolling the screen downards, leftwards and rightwards.
* Emulation can be stopped from game using the EXIT instruction.
* Bigger font digits (10 bytes, instead of the usual 5 bytes per digit).
* Information can be exchanged between emulator and underlying platform.

SCHIP is designed so that SCHIP emulators are backwards compatible with CHIP-8
games. It is possible to run a CHIP-8 game on a SCHIP emulator because SCHIP
instructions uses free spaces found in the original CHIP-8 instruction set.


2. EXTENDED SCREEN MODE
=======================
Extended screen mode is a feature part of SCHIP. On extended screen mode, the
screen resolution is upgraded to 128x64 pixels wide, plus the emulator gains
the ability to render 16x16 sprites, in contrast to 8x16 sprites like CHIP-8
can.

In order to keep compatibility with original CHIP-8 games, extended screen
game is not enabled by default. This means: SCHIP emulators also start in
64x32 mode. However, it is possible to enable Extended Screen Mode by
executing a special opcode that triggers extended screen mode.

* By triggering HIGH instruction, the emulator should enter extended screen
  mode. The resolution should change to 128x64 and the emulator should
  remember the new state for the DRAW opcode.
* By triggering LOW instruction, the emulator should leave extended screen
  mode. The resolution should go back to 64x32 and the emulator should
  not remember the state anymore.


3. SPRITE RENDERING
===================
SCHIP provides an aditional rendering mode modifying how the DRAW
instruction works. Thanks to these changes it is possible to render 16x16
sprites.

If the DRAW instruction is executed with N=0 and extended display is enabled,
then I points to a 16x16 sprite structure that should be rendered at the
location given in Vx, Vy.

The sprite is encoded as a series of 16 rows, each row being 16 bits wide.
So, the sprite is 32 bytes. Just like in the original CHIP-8, bytes in the
lowest addresses are rendered in smaller Y values (they appear on top).
Also, SCHIP seems to be big-endian, so MSB bits in each row are rendered
leftside.


4. BIGGER FONTS
===============
SCHIP provides 10 row digit sprites (10-byte sprites). Executing the LDHF
instruction will make the I register point to the memory address where one
of these sprites is located in. It is possible to render the sprite later
using the DRAW instruction.

At the moment I haven't found any reference digit sprites. So I guess that
this is up to the emulator developer to use the sprite font they want.


5. SCREEN SCROLLING
===================
There are three instructions designed for scrolling the window: moving the
pixels to one or other side, depending on the executed instruction.

* SCD: this instruction scrolls the screen down. The number of lines the
  screen should be scrolled down is given as argument N: 0x00CN.
* SCR: this instruction scrolls the screen 4 pixels to the right.
* SCL: this instruction scrolls the screen 4 pixels to the left.


6. USER FLAGS
=============
This feature provides 8 aditional flags to the SCHIP emulator. In the
original SCHIP implementation made for the HP 48 series calculator, the
registers were also used by the RPL programming language; which means that
the data from this registers could be inputed via RPL before running the
emulator; and the values in this registers after the emulation could be
later accessed via RPL. It is not clear how could this be emulated in other
platforms.

The LD R, Vx and LD Vx, R instructions let the user store registers V0 to Vx
in the R registers. Because the RPL only had 8 registers, it is only
possible to store from V0 up to V7.


7. OPCODES REFERENCE
====================
SCD     00CN    Scrolls the screen down.
SCR     00FB    Scrolls the screen to the right.
SCL     00FC    Scrolls the screen to the left.
EXIT    00FD    Exits CHIP8 interpreter.
LOW     00FE    Disables extended screen mode.
HIGH    00FF    Enables extended screen mode.
DRAW    DXYN    Render sprite (using SCHIP capabilities).
LDHF    FX30    Points I to a 10-byte font sprite.
LDRV    FX75    Store V0..VX (X <= 7) in RPL user flags.
LDVR    FX85    Read V0..VX (X <= 7) from RPL user flags.


8. EXAMPLE ASSEMBLY INSTRUCTIONS
================================

    SCD 6           ; Scroll the screen 6 pixels down.
    SCR             ; Scroll the screen to the right.
    SCL             ; Scroll the screen to the left.
    EXIT            ; Stop the emulation.
    LOW             ; Leave extended screen mode.
    HIGH            ; Enter extended screen mode.
    DRAW V5, V4, 0  ; Draw the 16x16 bit sprite at [5][4].
    LD HF, V3       ; Make I point to the digit located in V3.
    LD R, V7        ; Store registers V0 to V7 in R.
    LD V5, R        ; read registers V0 to V5 from R.
        

9. ADITIONAL RESOURCES
===================
* https://groups.google.com/d/msg/comp.sys.handhelds/RuzVNccds2Q/TcvLEWuY9scJ
* https://groups.google.com/d/msg/comp.sys.handhelds/sDY9zFb6KUo/JcYBK2_yerMJ
* http://devernay.free.fr/hacks/chip8/C8TECH10.HTM
* http://devernay.free.fr/hacks/chip8/schip.txt
* http://www.chip8.com/?page=82
* http://www.chip8.com/?page=89
* http://www.chip8.com/?page=85
